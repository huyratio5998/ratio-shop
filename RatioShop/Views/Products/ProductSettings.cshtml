@using RatioShop.Data.Models
@using RatioShop.Data.ViewModels
@using RatioShop.Enums
@model ListProductViewModel

@{
    ViewData["Title"] = "ProductSettings";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
    var currentSortType = !string.IsNullOrEmpty(ViewBag.SortBy) ? ViewBag.SortBy.ToLower() : "default";
    var currentPage = ViewBag.Page;
}

<h1>Product Settings</h1>

<div style="display:inline-flex">
    <span style="margin-right:300px">
        <a asp-action="Create">Create New</a>
    </span>
    <span>
        <form asp-action="ProductSettings">
            <label for="sortBy">Sort By:</label>
            <select name="sortBy" id="sortBy">
                @foreach (SortingEnum item in Enum.GetValues(typeof(SortingEnum)))
                {
                    var sortValue = item.ToString();
                    if (sortValue.Equals(currentSortType, StringComparison.OrdinalIgnoreCase))
                    {
                        <option value="@sortValue" selected>@sortValue</option>
                    }
                    else
                    {
                        <option value="@sortValue">@sortValue</option>
                    }
                }
            </select>
            <input type="hidden" name="page" value="@currentPage" />
            <input type="submit" value="Sort" />
        </form>
    </span>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                Code
            </th>
            <th>
                Product Image
            </th>
            <th>
                Product Name
            </th>
             <th>
                Categories
            </th>
             <th>
                EnableStockTracking
            </th>
            <th>
                Modified Date
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Products)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.Code)
                </td>

                @if (string.IsNullOrEmpty(item.ProductImageName))
                {
                    <td>
                        <img src="~/images/default-placeholder.jpg" style="height:150px;width:auto" alt="@item.Product.Name">
                    </td>
                }
                else
                {
                    <td>
                        <img src="~/images/products/@item.ProductImageName" style="height:150px;width:auto" alt="@item.Product.Name">
                    </td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.Product.ProductFriendlyName)
                </td>
                 <td>
                    @string.Join(", ", item.ProductCategories.Select(x=>x.DisplayName))
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.EnableStockTracking)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.ModifiedDate)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Product.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Product.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Product.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
<div>
    @for (var i = 1; i <= Model.TotalPage; i++)
    {
        var parms = new Dictionary<string, string>
    {
    { "sortby", currentSortType },
    { "page", i.ToString() }
    };

        <a asp-action="ProductSettings" asp-all-route-data="parms" class="@(i == Model.PageIndex ? "page-selected" : "")">@i</a>
        @if (Model.TotalPage > 1 && i < Model.TotalPage)
        {
            <span> > </span>
        }
    }
</div>
