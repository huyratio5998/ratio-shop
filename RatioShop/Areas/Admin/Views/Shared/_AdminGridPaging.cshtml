@using RatioShop.Data.ViewModels
@using RatioShop.Helpers

@model BaseListingPageViewModel

@{
    // params pass
    var parms = new Dictionary<string, string>();

    var filterItems = Model.FilterItems.FilterItemToJson();
    var sortType = Model.SortType;
    if (filterItems != null) parms.Add("filterItems", filterItems);
    if (sortType != Enums.SortingEnum.Default) parms.Add("sortType", sortType.ToString());

    // setting UI
    var disablePrevious = Model.PageIndex == 1 ? "disabled" : "";
    var disableNext = Model.PageIndex == Model.TotalPage ? "disabled" : "";

    int maxContinuesPage = 10;
    int stepEachGap = 2;
    int rangeLimit = 5;
    bool generateDotBefore = false;
    bool generateDotAfter = false;
}

<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item @disablePrevious">
            @{
                if (Model.PageIndex - 1 == 1) parms.Remove("page");
                else parms["page"] = (Model.PageIndex - 1).ToString();
            }
            <a asp-action="Index" asp-all-route-data="parms" class="page-link" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        @for (var i = 1; i <= Model.TotalPage; i++)
        {
            if (i == 1) parms.Remove("page");
            else parms["page"] = i.ToString();

            if (Model.TotalPage > maxContinuesPage)
            {
                if (i > 1 && i < Model.TotalPage)
                {
                    if (!generateDotBefore && i < Model.PageIndex - 2)
                    {
                        generateDotBefore = true;
                        <li class="page-item">
                            <a class="page-link">...</a>
                        </li>
                    }
                    else if ((Model.PageIndex - stepEachGap <= i && i <= Model.PageIndex + stepEachGap) || (Model.PageIndex + 2 < rangeLimit && i <= rangeLimit) || (Model.PageIndex - 2 > Model.TotalPage - rangeLimit && i > Model.TotalPage - rangeLimit))
                    {
                        <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                            <a asp-action="Index" asp-all-route-data="parms" class="page-link">@i</a>
                        </li>
                    }
                    else if (!generateDotAfter && Model.PageIndex + 2 < i && i < Model.TotalPage - 1)
                    {
                        generateDotAfter = true;
                        <li class="page-item">
                            <a class="page-link">...</a>
                        </li>
                    }
                }
                else
                {
                    generateDotBefore = false;
                    generateDotAfter = false;
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a asp-action="Index" asp-all-route-data="parms" class="page-link">@i</a>
                    </li>
                }
            }
            else
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a asp-action="Index" asp-all-route-data="parms" class="page-link">@i</a>
                </li>
            }
        }
        <li class="page-item @disableNext">
            @{
                parms["page"] = (Model.PageIndex + 1).ToString();
            }
            <a asp-action="Index" asp-all-route-data="parms" class="page-link" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>